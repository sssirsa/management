service: management

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1

  # The following two statements will need to be added if you are 
  # not declaring any http event handler in the base Stack
  iamRoleStatements:
    -
      Effect: "Allow"
      Action: [ logs:CreateLogStream ]
      Resource:
        Fn::Join: 
          - ""
          - ["arn:aws:logs:", {Ref: "AWS::Region"}, ":", {Ref: "AWS::AccountId"}, ":log-group:/aws/lambda/management-*:*"]
    -
      Effect: Allow
      Action: \[ logs:PutLogEvents \]
      Resource:
        Fn::Join:
          - ""
          - ["arn:aws:logs:", {Ref: "AWS::Region"}, ":", {Ref: "AWS::AccountId"}, ":log-group:/aws/lambda/management-*:*:*"]
  # other lambdas
    - 
      Effect: Allow
      Action: \["sqs:SendMessage", "sqs:SendMessageBatch"\]
      Resource:
        Fn::GetAtt: MySQSQueue.Arn
    - 
      Effect: Allow
      Action: \["sns:Publish"\]
      Resource:
        Fn::GetAtt: MySNSTopic.Arn          
          
plugins:
  - serverless-domain-manager

custom:
  customDomain:
    domainName: 'phoenix-soul-dev.sssirsa.org'
    basePath: 'management'          #This will be prefixed to all routes
    stage: dev
    createRoute53Record: true

resources:
  Resources:
    # The IAM Role is not automatically generated unless you specify
    # at leats one Lambda
    IAMRoleLambdaExecution:
      Type: "AWS::IAM::Role"
      Properties: 
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Principal: 
                Service: 
                  - "lambda.amazonaws.com"
              Action:
                - 'sts:AssumeRole' 
        Path: "/"
        RoleName: 
          Fn::Join: 
            - ""
            - [ "management", "dev", "us-east-1", "lambdaRole" ]
        Policies:
          - PolicyName: "dev-management-lambda"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action: 
                    - "logs:CreateLogStream"
                  Resource:
                    Fn::Join: 
                      - ""
                      - ["arn:aws:logs:", {Ref: "AWS::Region"}, ":", {Ref: "AWS::AccountId"}, ":log-group:/aws/lambda/management-*:*"]
                -
                  Effect: Allow
                  Action: 
                    - "logs:PutLogEvents"
                  Resource:
                    Fn::Join:
                      - ""
                      - ["arn:aws:logs:", {Ref: "AWS::Region"}, ":", {Ref: "AWS::AccountId"}, ":log-group:/aws/lambda/management-*:*:*"]
    # Rest API
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: management
        Description: Management API Gateway

    #Rest API Paths

  Outputs:
    # RestApi resource ID 
    RestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: management-dev-RestApiId
    # RestApi Root Resource (the implicit '/' path)
    RootResourceId:
      Value:
        !GetAtt ApiGatewayRestApi.RootResourceId
      Export:
        Name: management-dev-RootResourceId  
    # The IAM Role for Lambda execution
    IamRoleLambdaExecution:
      Value: !GetAtt IAMRoleLambdaExecution.Arn 
      Export:
        Name: management-dev-IamRoleLambdaExecution
    # Path Resources